{"version":3,"sources":["components/Statistics.js","components/FeedbackOptions.js","components/Section.js","components/Notification.js","App.js","index.js"],"names":["Statistics","good","bad","neutral","total","positivePercentage","FeedbackOptions","onLeaveFeedback","type","onClick","Section","title","children","Notification","message","defaultProps","App","state","addPoints","field","setState","countPositiveFeedbackPercentage","countTotalFeedback","Object","values","reduce","acc","el","toFixed","this","percentage","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+PAGe,SAASA,EAAT,GAAiE,IAA5CC,EAA2C,EAA3CA,KAAKC,EAAsC,EAAtCA,IAAIC,EAAkC,EAAlCA,QAAQC,EAA0B,EAA1BA,MAAMC,EAAoB,EAApBA,mBACzD,OACI,+BACE,wCAAWJ,KACX,2CAAcE,KACd,uCAAUD,KACV,yCAAYE,KACZ,qDAAwBC,EAAxB,UCPO,SAASC,EAAT,GAA4C,IAAlBC,EAAiB,EAAjBA,gBAGvC,OACI,gCAGI,wBAAQC,KAAK,SAASC,QAAS,kBAAIF,EAAgB,SAAnD,kBACA,wBAAQC,KAAK,SAASC,QAAS,kBAAIF,EAAgB,YAAnD,qBACA,wBAAQC,KAAK,SAASC,QAAS,kBAAIF,EAAgB,QAAnD,oBCTK,SAASG,EAAT,GAAmC,IAAjBC,EAAgB,EAAhBA,MAAMC,EAAU,EAAVA,SACrC,OACE,oCACGD,GAAS,6BAAKA,IACdC,KCJQ,SAASC,EAAT,GAAiC,IAAVC,EAAS,EAATA,QACpC,OACG,4BAAIA,IDOTJ,EAAQK,aAAe,CACrBJ,MAAO,I,IE0CMK,E,4MA9CbC,MAAQ,CACNhB,KAAM,EACNE,QAAS,EACTD,IAAK,G,EAIPgB,UAAU,SAACC,GACT,EAAKC,SAAL,eACGD,EAAQ,EAAKF,MAAME,GAAS,IAG/B,EAAKE,mC,EAGPC,mBAAoB,WAClB,OAAOC,OAAOC,OAAO,EAAKP,OAAOQ,QAAO,SAACC,EAAIC,GAAL,OAAUD,EAAIC,IAAG,I,EAI3DN,gCAAiC,WAC/B,OAAO,EAAKC,qBAAuB,GAAK,EAAKL,MAAMhB,KAAO,EAAKqB,qBAAuB,KAAKM,QAAQ,GAAK,G,uDAGjG,IAAD,EACqBC,KAAKZ,MAAzBhB,EADD,EACCA,KAAKE,EADN,EACMA,QAAQD,EADd,EACcA,IACdE,EAAQyB,KAAKP,qBACbQ,EAAaD,KAAKR,kCAExB,OACE,qCACA,cAACX,EAAD,CAASC,MAAQ,wBAAjB,SACA,cAACL,EAAD,CAAiBC,gBAAiBsB,KAAKX,cAGtCd,EAAO,EACP,cAACM,EAAD,CAASC,MAAQ,aAAjB,SACD,cAACX,EAAD,CAAYC,KAAMA,EAAME,QAASA,EAASD,IAAKA,EAAKE,MAAOA,EAAOC,mBAAoByB,MAGtF,cAACjB,EAAD,CAAcC,QAAQ,6B,GA1CViB,aCDlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.ae481903.chunk.js","sourcesContent":["import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function Statistics({good,bad,neutral,total,positivePercentage}){\r\n  return (\r\n      <ul>\r\n        <li>Good: {good}</li>\r\n        <li>Neutral: {neutral}</li>\r\n        <li>Bad: {bad}</li>\r\n        <li>Total: {total}</li>\r\n        <li>Positive feedback: {positivePercentage}%</li>\r\n      </ul>\r\n  );\r\n}\r\n\r\nStatistics.propTypes = {\r\n  good:PropTypes.number.isRequired,\r\n  bad: PropTypes.number.isRequired,\r\n  neutral: PropTypes.number.isRequired,\r\n  total: PropTypes.number.isRequired,\r\n  positivePercentage: PropTypes.node.isRequired\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function FeedbackOptions({onLeaveFeedback}){\r\n  // const newArr = (Object.keys(options));\r\n  // console.log(newArr);\r\n  return (\r\n      <div>\r\n        {/* {newArr.map(item=> ( */}\r\n\r\n          <button type=\"button\" onClick={()=>onLeaveFeedback('good')}>Good</button>\r\n          <button type=\"button\" onClick={()=>onLeaveFeedback('neutral')}>Neutral</button>\r\n          <button type=\"button\" onClick={()=>onLeaveFeedback('bad')}>Bad</button>\r\n\r\n        {/* } */}\r\n      </div>\r\n  );\r\n}\r\n\r\nFeedbackOptions.propTypes = {\r\n  onLeaveFeedback:PropTypes.func.isRequired\r\n};","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function Section({title,children}){\r\n  return (\r\n    <section>\r\n      {title && <h2>{title}</h2>}\r\n      {children}\r\n    </section>\r\n  )\r\n}\r\n\r\nSection.defaultProps = {\r\n  title: \"\"\r\n};\r\n\r\nSection.propTypes= {\r\n  title: PropTypes.string,\r\n  children: PropTypes.node\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nexport default function Notification({message}){\r\n  return (\r\n     <p>{message}</p>\r\n  );\r\n}\r\n\r\nNotification.propTypes = {\r\n  message:PropTypes.string.isRequired\r\n};","import React, {Component} from 'react';\nimport Statistics from './components/Statistics';\nimport FeedbackOptions from './components/FeedbackOptions';\nimport Section from './components/Section';\nimport Notification from './components/Notification';\n\n\nclass App extends Component {\n\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n\n  addPoints=(field)=>{\n    this.setState({\n      [field]: this.state[field] + 1\n    })\n\n    this.countPositiveFeedbackPercentage();\n  };\n\n  countTotalFeedback =() =>{\n    return Object.values(this.state).reduce((acc,el)=>acc+el,0)\n\n  };\n\n  countPositiveFeedbackPercentage =()=>{\n    return this.countTotalFeedback()  >0 ? (this.state.good / this.countTotalFeedback() * 100).toFixed(0) : 0;\n  };\n\n  render(){\n    const {good,neutral,bad} = this.state\n    const total = this.countTotalFeedback();\n    const percentage = this.countPositiveFeedbackPercentage();\n\n    return(\n      <>\n      <Section title = \"Please leave feedback\">\n      <FeedbackOptions onLeaveFeedback={this.addPoints}></FeedbackOptions>\n      </Section>\n\n      {total >0 ?\n      (<Section title = \"Statistics\">\n      <Statistics good={good} neutral={neutral} bad={bad} total={total} positivePercentage={percentage}></Statistics>\n      </Section>)\n        :\n      <Notification message=\"No feedback given\"/>}\n      </>\n    )\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}